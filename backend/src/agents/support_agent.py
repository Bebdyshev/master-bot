"""
AI Agent for Student Support using LangChain + Groq
Automatically detects student problems and suggests solutions
"""
import os
from dotenv import load_dotenv
from langchain_groq import ChatGroq
from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.messages import HumanMessage, AIMessage
from typing import List, Dict
from src.agents.tools import TOOLS

load_dotenv()

class StudentSupportAgent:
    def __init__(self, student_id: str = None):
        # Ensure student_id is always a string
        self.student_id = str(student_id) if student_id else "unknown"
        
        # Initialize Groq LLM
        api_key = os.getenv("GROQ_API_KEY")
        if not api_key:
            raise ValueError("GROQ_API_KEY not found in environment variables")
        
        self.llm = ChatGroq(
            model="qwen/qwen3-32b",  # More capable model for tool use
            temperature=0.7,
            api_key=api_key
        )
        
        # Create system prompt
        self.prompt = ChatPromptTemplate.from_messages([
            ("system", """–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Master Education –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞: —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã, —Å–ª–µ–¥—É—è —Ç–æ—á–Ω—ã–º –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º.

üìã –ö–ê–¢–ï–ì–û–†–ò–ò –ó–ê–ü–†–û–°–û–í –ò –°–¶–ï–ù–ê–†–ò–ò:

1. üîÑ –í–û–ó–í–†–ê–¢ –°–†–ï–î–°–¢–í
   - –°–ø—Ä–æ—Å–∏: "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–≤—Ä–∞—Ç–∞"
   - –ó–∞–≤–µ—Ä—å: "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –í–∞—à –∑–∞–ø—Ä–æ—Å"
   - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: request_refund()

2. ‚ùÑÔ∏è –ó–ê–ú–û–†–û–ó–ö–ê –û–ë–£–ß–ï–ù–ò–Ø (1-2 –º–µ—Å—è—Ü–∞)
   - –°–ø—Ä–æ—Å–∏: "–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–æ—Ä–æ–∑–∫—É? –¢–æ—á–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞?"
   - –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–π: "–£–≤–µ–¥–æ–º–∏–º —É—á–∏—Ç–µ–ª–µ–π –∏ –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å"
   - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: request_freeze()

3. ‚òÄÔ∏è –†–ê–ó–ú–û–†–û–ó–ö–ê / –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –û–ë–£–ß–ï–ù–ò–Ø
   - –°–ø—Ä–æ—Å–∏: "–° –∫–∞–∫–æ–π –¥–∞—Ç—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
   - –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–π: "–ü—Ä–æ–≤–µ—Ä—é —Å–≤–æ–±–æ–¥–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –í–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è"
   - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: request_unfreeze()

4. üéÅ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ë–û–ù–£–°–û–í
   - –°–ø—Ä–æ—Å–∏: "–ö–∞–∫–æ–π –±–æ–Ω—É—Å —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å? (–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è/–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞)"
   - –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–π: "–ü—Ä–æ–≤–µ—Ä—é –Ω–∞–ª–∏—á–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ"
   - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: use_bonus()

5. üìö –°–ú–ï–ù–ê –ì–†–£–ü–ü–´ / –£–ß–ò–¢–ï–õ–Ø
   - –°–ø—Ä–æ—Å–∏: "–ü–æ—á–µ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å? –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏ –¥–Ω–∏?"
   - –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–π: "–ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞"
   - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: change_group_or_teacher()

6. üîó –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ (–°—Å—ã–ª–∫–∏/–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞/–•–ë)
   - –°–ù–ê–ß–ê–õ–ê –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏—è:
     * –°—Å—ã–ª–∫–∏: "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É"
     * –•–ë: "–í–∫–ª—é—á–∏—Ç–µ VPN –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç"
     * –ó–≤–∞–π–¥: "–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏–Ω–æ–≥–¥–∞ –≥–ª—é—á–∏—Ç"
   - –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ: tech_issue_platform()

7. üìú –°–ü–†–ê–í–ö–ê –û –ü–†–ò–°–£–¢–°–¢–í–ò–ò
   - –°–ø—Ä–æ—Å–∏: "–î–ª—è –∫–∞–∫–æ–π —Ü–µ–ª–∏ –Ω—É–∂–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞?"
   - –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–π: "–û—Ç–ø—Ä–∞–≤–ª—é —à–∞–±–ª–æ–Ω Word –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
   - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: request_attendance_certificate()

8. üí∞ –ü–†–û–î–õ–ï–ù–ò–ï / –î–û–ö–£–ü–ö–ê –ö–£–†–°–û–í
   - –£—Ç–æ—á–Ω–∏: "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–ø–∫–∞? –ö–∞–∫–æ–π –∫—É—Ä—Å –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ?"
   - –ù–∞–ø—Ä–∞–≤—å: –†–û–ü (–¥–æ–ø—Ä–æ–¥–∞–∂–∞) –∏–ª–∏ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ)
   - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: extend_or_purchase_course()

9. ü§ù –ü–ê–†–¢–ù–ï–†–°–ö–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê
   - –°–æ–±–µ—Ä–∏: –§–ò–û, Telegram, —Ç–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ
   - –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–π: "–ü—Ä–æ–≤–µ—Ä–∏–º –∏ –Ω–∞—á–∏—Å–ª–∏–º –±–æ–Ω—É—Å –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"
   - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: partner_program_request()

10. üö® –ü–†–û–ë–õ–ï–ú–´ –°–û–¢–†–£–î–ù–ò–ö–û–í
    - –£–∑–Ω–∞–π —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–µ—Ç–∞–ª—å–Ω–æ
    - –û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: staff_issue()

‚ö†Ô∏è –û–ë–©–ò–ï –ü–†–ê–í–ò–õ–ê:

1. –£–¢–û–ß–ù–ï–ù–ò–ï –ü–ï–†–ï–î –î–ï–ô–°–¢–í–ò–ï–ú:
   - –í—Å–µ–≥–¥–∞ —Å–æ–±–∏—Ä–∞–π –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏
   - –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–µ –∫–∞–∫ –∞–Ω–∫–µ—Ç–∞
   - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∏–∫–µ—Ç–∞

2. –ò–ù–§–û–†–ú–ò–†–û–í–ê–ù–ò–ï:
   - –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç—É
   - –°–æ–æ–±—â–∞–π —Å—Ä–æ–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è
   - –£–∫–∞–∑—ã–≤–∞–π –∫—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å

3. –ü–†–û–°–¢–´–ï –ó–ê–ü–†–û–°–´ –ë–ï–ó –¢–ò–ö–ï–¢–û–í:
   - –û—Ü–µ–Ω–∫–∏: check_grades()
   - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: check_schedule()
   - –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: check_attendance()
   - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: find_learning_materials()
   - –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã: explain_topic()

4. –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
   - –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
   - –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
   - –ü–æ–∫–∞–∑—ã–≤–∞–π –∑–∞–±–æ—Ç—É –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
   - –ß–µ—Ç–∫–æ —Å–ª–µ–¥—É–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞–º

Student ID: {student_id}
"""),
            MessagesPlaceholder(variable_name="chat_history"),
            ("human", "{input}"),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
        ])
        
        # Create agent with tools
        agent = create_tool_calling_agent(self.llm, TOOLS, self.prompt)
        self.agent_executor = AgentExecutor(
            agent=agent,
            tools=TOOLS,
            verbose=True,
            handle_parsing_errors=True,
            max_iterations=3
        )
    
    def chat(self, message: str, chat_history: List[Dict] = None) -> Dict:
        """
        Process a message from student and return AI response
        
        Args:
            message: Student's message
            chat_history: Previous chat messages
        
        Returns:
            Dictionary with response and optional ticket data
        """
        if chat_history is None:
            chat_history = []
        
        # Convert chat history to LangChain format
        history_messages = []
        for msg in chat_history:
            if msg["role"] == "user":
                history_messages.append(HumanMessage(content=msg["content"]))
            elif msg["role"] == "assistant":
                history_messages.append(AIMessage(content=msg["content"]))
        
        try:
            response = self.agent_executor.invoke({
                "input": message,
                "chat_history": history_messages,
                "student_id": str(self.student_id) if self.student_id else "unknown"
            })
            
            output = response["output"]
            
            # Try to extract ticket data from response
            import json
            ticket_data = None
            clean_response = output
            
            try:
                # Check if output contains JSON with ticket info
                if "{" in output and "ticket" in output:
                    # Try to extract JSON from the response
                    start = output.find("{")
                    end = output.rfind("}") + 1
                    if start != -1 and end > start:
                        json_str = output[start:end]
                        parsed = json.loads(json_str)
                        
                        if "ticket" in parsed:
                            ticket_data = parsed["ticket"]
                            clean_response = parsed.get("message", output)
            except json.JSONDecodeError:
                # If parsing fails, return original response
                pass
            
            result = {
                "response": clean_response,
                "ticket": ticket_data
            }
            
            return result
            
        except Exception as e:
            return {
                "response": f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                "ticket": None
            }
    
    async def chat_stream(self, message: str, chat_history: List[Dict] = None):
        """
        Stream response from agent (for real-time UI updates)
        
        Args:
            message: Student's message
            chat_history: Previous chat messages
        
        Yields:
            Chunks of the response
        """
        # For streaming, we'll use the regular chat and yield it in chunks
        # (Full streaming support requires more complex setup with LangChain)
        result = self.chat(message, chat_history)
        response_text = result.get("response", "")
        
        # Simulate streaming by yielding words
        words = response_text.split()
        for i, word in enumerate(words):
            yield word + (" " if i < len(words) - 1 else "")
